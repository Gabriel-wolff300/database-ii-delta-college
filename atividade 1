SQL exercises
Topic: DML
Prof. Alexandre Calaça github.com/alexcalaca.com
Aluno: Gabriel Henrique Wolff de Sousa
Blog: dev.to/alexcalaca

For the following exercises, create a table named Customers

CREATE TABLE Customers (
 id INT PRIMARY KEY,
 first_name VARCHAR(50),
 last_name VARCHAR(50),
 age INT);

1 - Insert a record with the following values:

INSERT INTO customers (id, first_name, last_name) 

VALUES (1, 'Mishel', 'Henry');

2 - Update the record when id is 1 with the following values:

UPDATE customers SET first_name = 'James', last_name = 'Henryy' WHERE id = 1;

3 - Delete the record when id is 1.

DELETE from Customers WHERE id = 1;

4 - Read (Select) only the second_name from the table Customers

SELECT last_name from Customers;

5 - Insert a record with the following values:

INSERT INTO Customers (id, first_name, last_name) 

VALUES (1, 'Jim', 'Hendrix');

6 - Read (Select) only the first_name from the table Customers when id is 2

SELECT first_name from Customers WHERE id = 2;

7 - Update the record when id is 2 with the following values:

UPDATE Customers SET first_name = 'Roselyn', last_name = 'Alvarez' WHERE id = 2;

8 - Upddate all records with the following value:

UPDATE Customers

SET first_name = 'Michael', last_name = 'Kyle';

9 - Select all records with all fields

SELECT * from Customers;

10 - Delete all records

DROP TABLE customers;




ATIVIDADE 2 

SQL exercises
Topic: Aggregate functions and SQL operators
Prof. Alexandre Calaça
Aluno: Gabriel henrique wolff de sousa
github.com/alexcalaca.com
Blog: dev.to/alexcalaca


For the following exercises, create a table named Products:

CREATE TABLE Products (
    id SERIAL PRIMARY KEY,         -- Automatic primary key
    product_name VARCHAR(100) NOT NULL,  -- Product name, must not be null
    description TEXT,             -- Optional description
    price NUMERIC(10, 2) NOT NULL, -- Price, must not be null, with two decimal places
    inserted_at DATE,              -- Date attribute to track creation date
    is_available BOOLEAN          -- Boolean attribute to indicate availability
);
1 - Find the Average Price of Available Products
Goal: Calculate the average price of all products that are currently available

SELECT AVG(price) AS average_price from Products WHERE is_available = TRUE;

2 - Identify the Most Expensive and Least Expensive Products
Goal: Find the maximum and minimum prices of products, and display the corresponding product names.

SELECT product_name, price from Products ORDER BY price DESC LIMIT 1;

SELECT product_name, price from Products ORDER BY price ASC LIMIT 1;

3 - Count the Number of Products Inserted in the Last 30 Days
Goal: Count how many products have been inserted in the last 30 days from today's date.

SELECT COUNT(*) AS product_count from Products WHERE inserted_at >= date('now', '-30 days');

4 - Sum the Prices of Products That Fall Within a Specific Price Range
Goal: Calculate the total price of products that have a price between 50 and 200.

SELECT SUM(price) AS total_price from Products WHERE price BETWEEN 50 AND 200;

5 - List Products with Specific Characteristics Using SQL Operators
Goal: Retrieve the names of products that are available, priced above 100, and do not contain the word "Basic" in their name.

SELECT product_name from Products WHERE is_available = TRUE
  AND price > 100
  AND product_name NOT LIKE '%Basic%';
